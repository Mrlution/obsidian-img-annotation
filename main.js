/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImgAnnotation
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default",
  zoomSpeedSetting: 0.2
};
var ImgAnnotation = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", (evt) => {
      new import_obsidian.Notice("HelloYou");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
    this.registerEvent(this.app.workspace.on("active-leaf-change", async (leaf) => {
      const canvasView = this.app.workspace.getActiveViewOfType(import_obsidian.ItemView);
      if ((canvasView == null ? void 0 : canvasView.getViewType()) !== "canvas")
        return;
      const canvas = canvasView.canvas;
      if (!canvasView.isRegisteredTouchAndKeyEvents) {
        canvasView.ctrlKeyIsPressed = false;
        this.registerDomEvent(canvasView.containerEl, "keydown", (event) => {
          if (event.ctrlKey) {
            canvasView.ctrlKeyIsPressed = true;
          }
        });
        this.registerDomEvent(canvasView.containerEl, "keyup", (event) => {
          if (!event.ctrlKey) {
            canvasView.ctrlKeyIsPressed = false;
          }
        });
        this.registerDomEvent(canvasView.containerEl, "touchstart", (event) => {
          canvasView.HarmonyTableMouseStartTouches = event.touches.item(0);
        });
        this.registerDomEvent(canvasView.containerEl, "touchmove", (event) => {
          canvasView.HarmonyTableMouseEndTouches = event.touches.item(0);
          if (canvasView.ctrlKeyIsPressed && canvasView.HarmonyTableMouseEndTouches.clientY > canvasView.HarmonyTableMouseStartTouches.clientY) {
            canvasView.canvas.zoomBy(this.settings.zoomSpeedSetting, { x: canvasView.HarmonyTableMouseEndTouches.clientX - canvasView.canvas.canvasRect.cx, y: canvasView.HarmonyTableMouseEndTouches.clientY - canvasView.canvas.canvasRect.cy });
          } else if (canvasView.ctrlKeyIsPressed && canvasView.HarmonyTableMouseEndTouches.clientY < canvasView.HarmonyTableMouseStartTouches.clientY) {
            canvasView.canvas.zoomBy(-this.settings.zoomSpeedSetting, { x: canvasView.HarmonyTableMouseEndTouches.clientX - canvasView.canvas.canvasRect.cx, y: canvasView.HarmonyTableMouseEndTouches.clientY - canvasView.canvas.canvasRect.cy });
          }
        });
        canvasView.isRegisteredTouchAndKeyEvents = true;
      }
    }));
  }
  registerTouchEventsForHarmonyTabletMouse() {
    this.registerDomEvent(document, "touchstart", (event) => {
      this.HarmonyTableMouseStartTouches = event.touches.item(0);
    });
    this.registerDomEvent(document, "touchmove", (event) => {
      this.HarmonyTableMouseEndTouches = event.touches.item(0);
      if (Math.abs(this.HarmonyTableMouseEndTouches.clientX - this.HarmonyTableMouseStartTouches.clientX < 0.01)) {
        if (this.HarmonyTableMouseEndTouches.clientY > this.HarmonyTableMouseStartTouches.clientY) {
          this.canvas.zoomBy(0.5, { x: this.HarmonyTableMouseEndTouches.clientX - this.canvas.canvasRect.cx, y: this.HarmonyTableMouseEndTouches.clientY - this.canvas.canvasRect.cy });
        } else if (this.HarmonyTableMouseEndTouches.clientY < this.HarmonyTableMouseStartTouches.clientY) {
          this.canvas.zoomBy(-0.5, { x: this.HarmonyTableMouseEndTouches.clientX - this.canvas.canvasRect.cx, y: this.HarmonyTableMouseEndTouches.clientY - this.canvas.canvasRect.cy });
        }
      }
    });
  }
  // const touchEvents = ["touchstart", "touchmove", "touchend"];
  // touchEvents.forEach((eventName) => {
  //     this.registerDomEvent(document, eventName, (event: TouchEvent) => {
  //         //console.log(`Touch event: ${eventName}`, event);
  // 		new Notice(touchesToString(event.touches));
  // 		//new Notice(`${eventName}`, event.touches.stringify());
  //     });
  // });
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Zoom Speed").setDesc("0.1 to 1.0").addText((text) => {
      text.setPlaceholder("0.2").setValue(this.plugin.settings.zoomSpeedSetting.toString()).onChange(async (value) => {
        const float_value = parseFloat(value);
        if (!isNaN(float_value) && (float_value >= 0 && float_value <= 1)) {
          this.plugin.settings.zoomSpeedSetting = float_value;
        } else {
          this.plugin.settings.zoomSpeedSetting = 0.2;
        }
        text.setValue(this.plugin.settings.zoomSpeedSetting.toString());
        await this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
